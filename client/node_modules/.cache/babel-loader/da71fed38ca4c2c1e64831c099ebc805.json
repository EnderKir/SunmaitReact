{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Admin\\\\Documents\\\\SunmaitReact\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { LOAD_PROJECTS } from \"../const/projectsArrayAction\";\nconst initialState = {\n  projectsArray: []\n};\nexport function projectsArrayReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_PROJECTS:\n      return _objectSpread({}, state, {\n        projectsArray: action.value\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/Admin/Documents/SunmaitReact/client/src/reducers/projectsArrayReducer.js"],"names":["LOAD_PROJECTS","initialState","projectsArray","projectsArrayReducer","state","action","type","value"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,8BAA9B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE;AADI,CAArB;AAIA,OAAO,SAASC,oBAAT,CAA8BC,KAAK,GAAGH,YAAtC,EAAoDI,MAApD,EAA4D;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,aAAL;AACE,+BAAYI,KAAZ;AAAmBF,QAAAA,aAAa,EAAEG,MAAM,CAACE;AAAzC;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD","sourcesContent":["import { LOAD_PROJECTS } from \"../const/projectsArrayAction\";\r\n\r\nconst initialState = {\r\n  projectsArray: []\r\n};\r\n\r\nexport function projectsArrayReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOAD_PROJECTS:\r\n      return { ...state, projectsArray: action.value };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}